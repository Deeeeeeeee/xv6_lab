xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)). See also https://pdos.csail.mit.edu/6.828/, which
provides pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Silas Boyd-Wickizer, Anton Burtsev, Dan Cross, Cody Cutler, Mike CAT,
Tej Chajed, Asami Doi, eyalz800, , Nelson Elhage, Saar Ettinger, Alice
Ferrazzi, Nathaniel Filardo, Peter Froehlich, Yakir Goaron,Shivam
Handa, Bryan Henry, jaichenhengjie, Jim Huang, Alexander Kapshuk,
Anders Kaseorg, kehao95, Wolfgang Keller, Jonathan Kimmitt, Eddie
Kohler, Austin Liew, Imbar Marinescu, Yandong Mao, Matan Shabtay,
Hitoshi Mitake, Carmi Merimovich, Mark Morrissey, mtasm, Joel Nider,
Greg Price, Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya
Shigemitsu, Takahiro, Cam Tenny, tyfkda, Rafael Ubal, Warren Toomey,
Stephen Tu, Pablo Ventura, Xi Wang, Keiichi Watanabe, Nicolas
Wolovick, wxdao, Grant Wu, Jindong Zhang, Icenowy Zheng, and Zou Chang
Wei.

The code in the files that constitute xv6 is
Copyright 2006-2020 Frans Kaashoek, Robert Morris, and Russ Cox.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu). The main purpose of xv6 is as a teaching
operating system for MIT's 6.S081, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu. Once they are installed, and in your shell
search path, you can run "make qemu".

## 准备

按照官网安装 https://pdos.csail.mit.edu/6.828/2020/tools.html

```
sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu
```

## 计算分数

make GRADEFLAGS=sleep grade
./grade-lab-util sleep

## sleep.c

- 如果没有传参数，要 print 错误信息
- 命令行参数是字符串，可以用 atoi 转换成 int
- 使用系统调用 sleep
- 看 kernel/sysproc.c 代码实现 sleep 系统调用(sys_sleep). user/user.h 用户程序调 sleep. user/users.S 汇编代码从用户态跳到内核 for sleep
- 确定 main 使用 exit() 退出程序
- 在 Makefile 将自己的 sleep 程序添加到 UPROGS，一旦这么做，make qemu 会编译你的程序，然后你在 xv6 中可以执行它

## pingpong.c

使用管道，父进程发送 bytes 给子进程；子进程 print "<pid>: received ping"，然后发送字节给父进程；父进程收到后 print "<pid>: received pong"

- 使用 pipe
- fork 创建子进程
- read() 读，write() 写
- 使用 getpid 获取 pid
- 加入 UPROGS 在 Makefile

## primes.c

用 pipe 写一个并发版本的素数筛选，idea: https://swtch.com/~rsc/thread/. 用 pipe 和 fork 创建 pipeline，第一个进程将 2 到 35 放到 pipeline 中。每个素数创建一个进程从管道一边读，然后写到管道另一边

```
p = get a number from left neighbor
print p
loop:
    n = get a number from left neighbor
    if (p does not divide n)
        send n to right neighbor
```

- 要 close 调不需要的 fd
- 一旦第一个进程达到 35，它需要等待整个 pipeline 中断，包括所有的子进程
- write-side 的管道关闭 read 会返回 0
- 写 32-bit 的 int 到管道比格式化 ASCII I/O 简单
- 只有 pipeline 需要的时候，才创建它
- 加入到 UPROGS 中

思路：
- 父进程写数字
- 子进程递归调用 prime
- 子进程 read 到 0 时，表示父进程 write close 了
- wait 只会等待子进程结束，不会等待孙子进程结束。所以父进程直接 wait 就行，子进程再直接 wait 孙子进程...

## find.c

写一个简单版本的 unix find 程序，在目录树下找特定文件名的文件

- 参考 user/ls.c 怎么读目录的
- 使用递归来向下 find 子目录
- 不要递归 "." 和 ".."
- 改变文件系统，要 make clean 然后 make qemu
- 要用到 C strings. 可以参考 C 语言的数 5.5 章节
- 比较字符串要用 strcmp()
- 添加程序到 UPROGS 到 Makefile 中

思路：
- 读当前目录下的文件和文件夹，如果是文件夹，递归它
- 如果是文件，判断名字是否相同

## xargs.c

写一个简单版本的 unix xargs 程序，从标准输入读取，然后each line执行一个命令，提供命令行作为参数

例子. 下面的例子相当于 echo bye hello too
```
$ echo hello too | xargs echo bye
bye hello too
```

- 使用 fork 和 exec 来调用每一行输入. 在父进程用 wait 去等待子进程完成命令
- 为了独立读取每行输入，一次只读一个字符知道新行出现 '\n'
- kernel/param.h 声明了 MAXARG，当你声明一个 argv 数组时可能有用
- 添加程序到 UPROGS 到 Makefile 中
- 改变文件系统，要 make clean 然后 make qemu

测试

```
$ make qemu
...
init: starting sh
$ sh < xargstest.sh
$ $ $ $ $ $ hello
hello
hello
$ $ 
```

